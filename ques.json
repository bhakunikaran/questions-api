{"Questions": {"1": {"Question": "Is Python case sensitive when dealing with identifiers?", "option1": "yes", "option2": "no", "option3": "machine dependent", "option4": "none of the mentioned", "answer": "a", "explanation": "Case is always significant"}, "2": {"Question": "What is the maximum possible length of an identifier?", "option1": "31 characters", "option2": "63 characters", "option3": "79 characters", "option4": "none of the mentioned", "answer": "d", "explanation": "Identifiers can be of any length."}, "3": {"Question": "Which of the following is invalid?", "option1": "_a = 1", "option2": "__a = 1", "option3": "__str__ = 1", "option4": "none of the mentioned", "answer": "d", "explanation": "All the statements will execute successfully but at the cost of reduced readability."}, "4": {"Question": "Which of the following is an invalid variable?", "option1": "my_string_1", "option2": "1st_string", "option3": "foo", "option4": "_", "answer": "b", "explanation": "Variable names should not start with a number."}, "5": {"Question": "Why are local variable names beginning with an underscore discouraged?", "option1": "they are used to indicate a private variables of a class", "option2": "they confuse the interpreter", "option3": "they are used to indicate global variables", "option4": "they slow down execution", "answer": "a", "explanation": "As Python has no concept of private variables, leading underscores are used to indicate variables that must not be accessed from outside the class."}, "6": {"Question": "Which of the following is not a keyword?", "option1": "eval", "option2": "assert", "option3": "nonlocal", "option4": "pass", "answer": "a", "explanation": "eval can be used as a variable."}, "7": {"Question": "All keywords in Python are in", "option1": "lower case", "option2": "UPPER CASE", "option3": "Capitalized", "option4": "None of the mentioned", "answer": "d", "explanation": "True, False and None are capitalized while the others are in lower case"}, "8": {"Question": "Which of the following is true for variable names in Python?", "option1": "unlimited length", "option2": "all private members must have leading and trailing underscores", "option3": "underscore and ampersand are the only two special characters allowed", "option4": "none of the mentioned", "answer": "a", "explanation": "Variable names can be of any length."}, "9": {"Question": "Which of the following is an invalid statement?", "option1": "abc = 1,000,000", "option2": "a b c = 1000 2000 3000", "option3": " a,b,c = 1000, 2000, 3000", "option4": "a_b_c = 1,000,000", "answer": "b", "explanation": "Spaces are not allowed in variable names."}, "10": {"Question": " Which of the following cannot be a variable?", "option1": " __init__", "option2": "in", "option3": "it", "option4": "on", "answer": "b", "explanation": "in is a keyword."}, "11": {"Question": "Which is the correct operator for power(xy)?", "option1": "X^y", "option2": "X**y", "option3": "X^^y", "option4": "None of the mentioned", "answer": "b", "explanation": "In python, power operator is x**y i.e. 2**3=8."}, "12": {"Question": "Which one of these is floor division?", "option1": "/", "option2": "//", "option3": "%", "option4": "None of the mentioned", "answer": "b", "explanation": "When both of the operands are integer then python chops out the fraction part and gives you the round off value, to get the accurate answer use floor division. This is floor division. For ex, 5/2 = 2.5 but both of the operands are integer so answer of this expression in python is 2.To get the 2.5 answer, use floor division."}, "13": {"Question": "What is the answer to this expression, 22 % 3 is?", "option1": "7", "option2": "1", "option3": "0", "option4": "5", "answer": "b", "explanation": "Modulus operator gives the remainder. So, 22%3 gives the remainder, that is, 1."}, "14": {"Question": "Mathematical operations can be performed on a string. State whether true or false.", "option1": "TRUE", "option2": "FALSE", "option3": "", "option4": "", "answer": "b", "explanation": "You can\u2019t perform mathematical operation on string even if the string is in the form: \u20181234\u2026\u2019."}, "15": {"Question": "Operators with the same precedence are evaluated in which manner?", "option1": "Left to Right", "option2": "Right to Left", "option3": "Can\u2019t say", "option4": "None of the mentioned", "answer": "a", "explanation": "None"}, "16": {"Question": "What is the output of this expression, 3*1**3?", "option1": "27", "option2": "9", "option3": "3", "option4": "1", "answer": "c", "explanation": "First this expression will solve 1**3 because exponential has higher precedence than multiplication, so 1**3 = 1 and 3*1 = 3. Final answer is 3."}, "17": {"Question": "Which one of the following has the same precedence level?", "option1": "Addition and Subtraction", "option2": "Multiplication, Division and Addition", "option3": "Multiplication, Division, Addition and Subtraction", "option4": "Addition and Multiplication", "answer": "a", "explanation": "\u201cAddition and Subtraction\u201d are at the same precedence level. Similarly, \u201cMultiplication and Division\u201d are at the same precedence level. However, Multiplication and Division operators are at a higher precedence level than Addition and Subtraction operators."}, "18": {"Question": "The expression Int(x) implies that the variable x is converted to integer. State whether true or false.", "option1": "TRUE", "option2": "FALSE", "option3": "", "option4": "", "answer": "a", "explanation": "None"}, "19": {"Question": "Which one of the following has the highest precedence in the expression?", "option1": "Exponential", "option2": "Addition", "option3": "Multiplication", "option4": "Parentheses", "answer": "d", "explanation": "Just remember: PEMDAS, that is, Parenthesis, Exponentiation, Division, Multiplication, Addition, Subtraction. Note that the precedence order of Division and Multiplication is the same. Likewise, the order of Addition and Subtraction is also the same."}, "20": {"Question": "Which of these in not a core data type?", "option1": "Lists", "option2": "Dictionary", "option3": "Tuples", "option4": "Class", "answer": "d", "explanation": "Class is a user defined data type."}, "21": {"Question": "Given a function that does not return any value, What value is thrown by default when executed in shell.", "option1": "int", "option2": "bool", "option3": "void", "option4": "None", "answer": "d", "explanation": "Python shell throws a NoneType object back."}, "22": {"Question": "Which of the following will run without errors ?", "option1": "round(45.8)", "option2": "round(6352.898,2,5)", "option3": "round()", "option4": "round(7463.123,2,1)", "answer": "a", "explanation": "Execute help(round) in the shell to get details of the parameters that are passed into the round function."}, "23": {"Question": "What is the return type of function id?", "option1": "int", "option2": "float", "option3": "bool", "option4": "dict", "answer": "a", "explanation": "Execute help(id) to find out details in python shell.id returns a integer value that is unique."}, "24": {"Question": "What error occurs when you execute?\u00a0apple = mango", "option1": "SyntaxError", "option2": "NameError", "option3": "ValueError", "option4": "TypeError", "answer": "b", "explanation": "Mango is not defined hence name error."}, "25": {"Question": "What data type is the object below ?\u00a0L = [1, 23, \u2018hello\u2019, 1].", "option1": "list", "option2": "dictionary", "option3": "array", "option4": "tuple", "answer": "a", "explanation": "List data type can store any values within it."}, "26": {"Question": "In order to store values in terms of key and value we use what core data type.", "option1": "list", "option2": "tuple", "option3": "class", "option4": "dictionary", "answer": "d", "explanation": "Dictionary stores values in terms of keys and values."}, "27": {"Question": "Which of the following results in a SyntaxError ?", "option1": "\u2018\u201dOnce upon a time\u2026\u201d, she said.\u2019", "option2": "\u201cHe said, \u2018Yes!'\u201d", "option3": "\u20183\\\u2019", "option4": "\u201d\u2019That\u2019s okay\u201d\u2019", "answer": "c", "explanation": "Carefully look at the colons."}, "28": {"Question": "Select all options that print\u00a0hello-how-are-you", "option1": "print(\u2018hello\u2019, \u2018how\u2019, \u2018are\u2019, \u2018you\u2019)", "option2": "print(\u2018hello\u2019, \u2018how\u2019, \u2018are\u2019, \u2018you\u2019 + \u2018-\u2018 * 4)", "option3": "print(\u2018hello-\u2018 + \u2018how-are-you\u2019)", "option4": "print(\u2018hello\u2019 + \u2018-\u2018 + \u2018how\u2019 + \u2018-\u2018 + \u2018are\u2019 + \u2018you\u2019)", "answer": "c", "explanation": "Execute in the shell."}, "29": {"Question": "What is the return value of trunc() ?", "option1": "int", "option2": "bool", "option3": "float", "option4": "None", "answer": "a", "explanation": "Execute help(math.trunc) to get details."}, "30": {"Question": "What is the output of print 0.1 + 0.2 == 0.3?", "option1": "TRUE", "option2": "FALSE", "option3": "Machine dependent", "option4": "Error", "answer": "b", "explanation": "Neither of 0.1, 0.2 and 0.3 can be represented accurately in binary. The round off errors from 0.1 and 0.2 accumulate and hence there is a difference of 5.5511e-17 between (0.1 + 0.2) and 0.3."}, "31": {"Question": "Which of the following is not a complex number?", "option1": "k = 2 + 3j", "option2": "k = complex(2, 3)", "option3": "k = 2 + 3l", "option4": "k = 2 + 3J", "answer": "c", "explanation": "l (or L) stands for long."}, "32": {"Question": "What is the type of inf?", "option1": "Boolean", "option2": "Integer", "option3": "Float", "option4": "Complex", "answer": "c", "explanation": "Infinity is a special case of floating point numbers. It can be obtained by float(\u2018inf\u2019)."}, "33": {"Question": "What does ~4 evaluate to?", "option1": "-5", "option2": "-4", "option3": "-3", "option4": "3", "answer": "a", "explanation": "~x is equivalent to -(x+1)."}, "34": {"Question": "What does ~~~~~~5 evaluate to?", "option1": "5", "option2": "-11", "option3": "11", "option4": "-5", "answer": "a", "explanation": "~x is equivalent to -(x+1)."}, "35": {"Question": "Which of the following is incorrect?", "option1": "x = 0b101", "option2": "x = 0x4f5", "option3": "x = 19023", "option4": "x = 03964", "answer": "d", "explanation": "Numbers starting with a 0 are octal numbers but 9 isn\u2019t allowed in octal numbers."}, "36": {"Question": "What is the result of cmp(3, 1)?", "option1": "1", "option2": "0", "option3": "TRUE", "option4": "FALSE", "answer": "a", "explanation": "cmp(x, y) returns 1 if x > y, 0 if x == y and -1 if x < y."}, "37": {"Question": "Which of the following is incorrect?", "option1": "float(\u2018inf\u2019)", "option2": "float(\u2018nan\u2019)", "option3": "float(\u201956\u2019+\u201978\u2019)", "option4": "float(\u201912+34\u2032)", "answer": "d", "explanation": " \u2018+\u2019 cannot be converted to a float."}, "38": {"Question": "What does 3 ^ 4 evaluate to?", "option1": "81", "option2": "12", "option3": "0.75", "option4": "7", "answer": "d", "explanation": "^ is the Binary XOR operator."}}}
